diff --git a/gst/gst.c b/gst/gst.c
--- a/gst/gst.c
+++ b/gst/gst.c
@@ -686,7 +686,9 @@ init_post (GOptionContext * context, GOptionGroup * group, gpointer data,
   g_type_class_ref (gst_allocator_flags_get_type ());
   g_type_class_ref (gst_stream_flags_get_type ());
   g_type_class_ref (gst_stream_type_get_type ());
+#if !defined(__native_client__)
   g_type_class_ref (gst_stack_trace_flags_get_type ());
+#endif
 
   _priv_gst_event_initialize ();
   _priv_gst_buffer_initialize ();
@@ -1134,7 +1136,9 @@ gst_deinit (void)
   g_type_class_unref (g_type_class_peek (gst_allocator_flags_get_type ()));
   g_type_class_unref (g_type_class_peek (gst_stream_flags_get_type ()));
   g_type_class_unref (g_type_class_peek (gst_debug_color_mode_get_type ()));
+#if !defined(__native_client__)
   g_type_class_unref (g_type_class_peek (gst_stack_trace_flags_get_type ()));
+#endif
 
   gst_deinitialized = TRUE;
   GST_INFO ("deinitialized GStreamer");
diff --git a/gst/gstbin.c b/gst/gstbin.c
--- a/gst/gstbin.c
+++ b/gst/gstbin.c
@@ -367,7 +367,7 @@ gst_bin_class_init (GstBinClass * klass)
   gst_bin_signals[ELEMENT_ADDED] =
       g_signal_new ("element-added", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_FIRST, G_STRUCT_OFFSET (GstBinClass, element_added), NULL,
-      NULL, g_cclosure_marshal_generic, G_TYPE_NONE, 1, GST_TYPE_ELEMENT);
+      NULL, g_cclosure_marshal_VOID__POINTER, G_TYPE_NONE, 1, GST_TYPE_ELEMENT);
   /**
    * GstBin::element-removed:
    * @bin: the #GstBin
@@ -378,7 +378,7 @@ gst_bin_class_init (GstBinClass * klass)
   gst_bin_signals[ELEMENT_REMOVED] =
       g_signal_new ("element-removed", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_FIRST, G_STRUCT_OFFSET (GstBinClass, element_removed), NULL,
-      NULL, g_cclosure_marshal_generic, G_TYPE_NONE, 1, GST_TYPE_ELEMENT);
+      NULL, g_cclosure_marshal_VOID__POINTER, G_TYPE_NONE, 1, GST_TYPE_ELEMENT);
   /**
    * GstBin::deep-element-added:
    * @bin: the #GstBin
@@ -392,7 +392,7 @@ gst_bin_class_init (GstBinClass * klass)
   gst_bin_signals[DEEP_ELEMENT_ADDED] =
       g_signal_new ("deep-element-added", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_FIRST, G_STRUCT_OFFSET (GstBinClass, deep_element_added),
-      NULL, NULL, g_cclosure_marshal_generic, G_TYPE_NONE, 2, GST_TYPE_BIN,
+      NULL, NULL, gst_closure_marshal_VOID__POINTER_POINTER, G_TYPE_NONE, 2, GST_TYPE_BIN,
       GST_TYPE_ELEMENT);
   /**
    * GstBin::deep-element-removed:
@@ -407,7 +407,7 @@ gst_bin_class_init (GstBinClass * klass)
   gst_bin_signals[DEEP_ELEMENT_REMOVED] =
       g_signal_new ("deep-element-removed", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_FIRST, G_STRUCT_OFFSET (GstBinClass, deep_element_removed),
-      NULL, NULL, g_cclosure_marshal_generic, G_TYPE_NONE, 2, GST_TYPE_BIN,
+      NULL, NULL, gst_closure_marshal_VOID__POINTER_POINTER, G_TYPE_NONE, 2, GST_TYPE_BIN,
       GST_TYPE_ELEMENT);
   /**
    * GstBin::do-latency:
@@ -428,7 +428,7 @@ gst_bin_class_init (GstBinClass * klass)
   gst_bin_signals[DO_LATENCY] =
       g_signal_new ("do-latency", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_LAST, G_STRUCT_OFFSET (GstBinClass, do_latency),
-      _gst_boolean_accumulator, NULL, g_cclosure_marshal_generic,
+      _gst_boolean_accumulator, NULL, gst_closure_marshal_BOOLEAN__VOID,
       G_TYPE_BOOLEAN, 0, G_TYPE_NONE);
 
   /**
diff --git a/gst/gstbus.c b/gst/gstbus.c
--- a/gst/gstbus.c
+++ b/gst/gstbus.c
@@ -201,7 +201,7 @@ gst_bus_class_init (GstBusClass * klass)
       g_signal_new ("sync-message", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_LAST | G_SIGNAL_DETAILED,
       G_STRUCT_OFFSET (GstBusClass, sync_message), NULL, NULL,
-      g_cclosure_marshal_generic, G_TYPE_NONE, 1, GST_TYPE_MESSAGE);
+      gst_closure_marshal_VOID__POINTER, G_TYPE_NONE, 1, GST_TYPE_MESSAGE);
 
   /**
    * GstBus::message:
@@ -216,7 +216,7 @@ gst_bus_class_init (GstBusClass * klass)
       g_signal_new ("message", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_LAST | G_SIGNAL_DETAILED,
       G_STRUCT_OFFSET (GstBusClass, message), NULL, NULL,
-      g_cclosure_marshal_generic, G_TYPE_NONE, 1, GST_TYPE_MESSAGE);
+      gst_closure_marshal_VOID__POINTER, G_TYPE_NONE, 1, GST_TYPE_MESSAGE);
 
   g_type_class_add_private (klass, sizeof (GstBusPrivate));
 }
diff --git a/gst/gstchildproxy.c b/gst/gstchildproxy.c
--- a/gst/gstchildproxy.c
+++ b/gst/gstchildproxy.c
@@ -516,7 +516,7 @@ gst_child_proxy_base_init (gpointer g_class)
     signals[CHILD_ADDED] =
         g_signal_new ("child-added", G_TYPE_FROM_CLASS (g_class),
         G_SIGNAL_RUN_FIRST, G_STRUCT_OFFSET (GstChildProxyInterface,
-            child_added), NULL, NULL, g_cclosure_marshal_generic, G_TYPE_NONE,
+            child_added), NULL, NULL, gst_closure_marshal_VOID__POINTER_POINTER, G_TYPE_NONE,
         2, G_TYPE_OBJECT, G_TYPE_STRING);
 
     /**
@@ -530,7 +530,7 @@ gst_child_proxy_base_init (gpointer g_class)
     signals[CHILD_REMOVED] =
         g_signal_new ("child-removed", G_TYPE_FROM_CLASS (g_class),
         G_SIGNAL_RUN_FIRST, G_STRUCT_OFFSET (GstChildProxyInterface,
-            child_removed), NULL, NULL, g_cclosure_marshal_generic, G_TYPE_NONE,
+            child_removed), NULL, NULL, gst_closure_marshal_VOID__POINTER_POINTER, G_TYPE_NONE,
         2, G_TYPE_OBJECT, G_TYPE_STRING);
 
     initialized = TRUE;
diff --git a/gst/gstclock.c b/gst/gstclock.c
--- a/gst/gstclock.c
+++ b/gst/gstclock.c
@@ -712,7 +712,7 @@ gst_clock_class_init (GstClockClass * klass)
   gst_clock_signals[SIGNAL_SYNCED] =
       g_signal_new ("synced", G_TYPE_FROM_CLASS (klass), G_SIGNAL_RUN_LAST,
       0, NULL, NULL,
-      g_cclosure_marshal_generic, G_TYPE_NONE, 1, G_TYPE_BOOLEAN);
+      g_cclosure_marshal_VOID__BOOLEAN, G_TYPE_NONE, 1, G_TYPE_BOOLEAN);
 
   g_type_class_add_private (klass, sizeof (GstClockPrivate));
 }
diff --git a/gst/gstconfig.h.in b/gst/gstconfig.h.in
--- a/gst/gstconfig.h.in
+++ b/gst/gstconfig.h.in
@@ -104,7 +104,7 @@
  * http://docs.oracle.com/cd/E19205-01/820-4155/c++_faq.html#Vers6
  * https://software.intel.com/en-us/node/583402
  */
-#if defined(__alpha__) || defined(__arc__) || defined(__arm__) || defined(__aarch64__) || defined(__bfin) || defined(__hppa__) || defined(__nios2__) || defined(__MICROBLAZE__) || defined(__mips__) || defined(__or1k__) || defined(__sh__) || defined(__SH4__) || defined(__sparc__) || defined(__sparc) || defined(__ia64__) || defined(_M_ALPHA) || defined(_M_ARM) || defined(_M_IA64) || defined(__xtensa__)
+#if defined(__native_client__) || defined(__alpha__) || defined(__arc__) || defined(__arm__) || defined(__aarch64__) || defined(__bfin) || defined(__hppa__) || defined(__nios2__) || defined(__MICROBLAZE__) || defined(__mips__) || defined(__or1k__) || defined(__sh__) || defined(__SH4__) || defined(__sparc__) || defined(__sparc) || defined(__ia64__) || defined(_M_ALPHA) || defined(_M_ARM) || defined(_M_IA64) || defined(__xtensa__)
 #  define GST_HAVE_UNALIGNED_ACCESS 0
 #elif defined(__i386__) || defined(__i386) || defined(__amd64__) || defined(__amd64) || defined(__x86_64__) || defined(__ppc__) || defined(__ppc64__) || defined(__powerpc__) || defined(__powerpc64__) || defined(__m68k__) || defined(_M_IX86) || defined(_M_AMD64) || defined(_M_X64) || defined(__s390__) || defined(__s390x__) || defined(__zarch__)
 #  define GST_HAVE_UNALIGNED_ACCESS 1
diff --git a/gst/gstdeviceprovider.c b/gst/gstdeviceprovider.c
--- a/gst/gstdeviceprovider.c
+++ b/gst/gstdeviceprovider.c
@@ -141,12 +141,12 @@ gst_device_provider_class_init (GstDeviceProviderClass * klass)
   gst_device_provider_signals[PROVIDER_HIDDEN] =
       g_signal_new ("provider-hidden", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_FIRST, 0, NULL,
-      NULL, g_cclosure_marshal_generic, G_TYPE_NONE, 1, G_TYPE_STRING);
+      NULL, g_cclosure_marshal_VOID__STRING, G_TYPE_NONE, 1, G_TYPE_STRING);
 
   gst_device_provider_signals[PROVIDER_UNHIDDEN] =
       g_signal_new ("provider-unhidden", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_FIRST, 0, NULL,
-      NULL, g_cclosure_marshal_generic, G_TYPE_NONE, 1, G_TYPE_STRING);
+      NULL, g_cclosure_marshal_VOID__STRING, G_TYPE_NONE, 1, G_TYPE_STRING);
 }
 
 static void
diff --git a/gst/gstelement.c b/gst/gstelement.c
--- a/gst/gstelement.c
+++ b/gst/gstelement.c
@@ -225,7 +225,7 @@ gst_element_class_init (GstElementClass * klass)
   gst_element_signals[PAD_ADDED] =
       g_signal_new ("pad-added", G_TYPE_FROM_CLASS (klass), G_SIGNAL_RUN_LAST,
       G_STRUCT_OFFSET (GstElementClass, pad_added), NULL, NULL,
-      g_cclosure_marshal_generic, G_TYPE_NONE, 1, GST_TYPE_PAD);
+      g_cclosure_marshal_VOID__POINTER, G_TYPE_NONE, 1, GST_TYPE_PAD);
   /**
    * GstElement::pad-removed:
    * @gstelement: the object which received the signal
@@ -236,7 +236,7 @@ gst_element_class_init (GstElementClass * klass)
   gst_element_signals[PAD_REMOVED] =
       g_signal_new ("pad-removed", G_TYPE_FROM_CLASS (klass), G_SIGNAL_RUN_LAST,
       G_STRUCT_OFFSET (GstElementClass, pad_removed), NULL, NULL,
-      g_cclosure_marshal_generic, G_TYPE_NONE, 1, GST_TYPE_PAD);
+      g_cclosure_marshal_VOID__POINTER, G_TYPE_NONE, 1, GST_TYPE_PAD);
   /**
    * GstElement::no-more-pads:
    * @gstelement: the object which received the signal
@@ -248,7 +248,7 @@ gst_element_class_init (GstElementClass * klass)
   gst_element_signals[NO_MORE_PADS] =
       g_signal_new ("no-more-pads", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_LAST, G_STRUCT_OFFSET (GstElementClass, no_more_pads), NULL,
-      NULL, g_cclosure_marshal_generic, G_TYPE_NONE, 0);
+      NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
 
   gobject_class->dispose = gst_element_dispose;
   gobject_class->finalize = gst_element_finalize;
diff --git a/gst/gstobject.c b/gst/gstobject.c
--- a/gst/gstobject.c
+++ b/gst/gstobject.c
@@ -184,7 +184,7 @@ gst_object_class_init (GstObjectClass * klass)
       g_signal_new ("deep-notify", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_FIRST | G_SIGNAL_NO_RECURSE | G_SIGNAL_DETAILED |
       G_SIGNAL_NO_HOOKS, G_STRUCT_OFFSET (GstObjectClass, deep_notify), NULL,
-      NULL, g_cclosure_marshal_generic, G_TYPE_NONE, 2, GST_TYPE_OBJECT,
+      NULL, gst_closure_marshal_VOID__POINTER_POINTER, G_TYPE_NONE, 2, GST_TYPE_OBJECT,
       G_TYPE_PARAM);
 
   klass->path_string_separator = "/";
diff --git a/gst/gstpad.c b/gst/gstpad.c
--- a/gst/gstpad.c
+++ b/gst/gstpad.c
@@ -342,7 +342,7 @@ gst_pad_class_init (GstPadClass * klass)
   gst_pad_signals[PAD_LINKED] =
       g_signal_new ("linked", G_TYPE_FROM_CLASS (klass), G_SIGNAL_RUN_LAST,
       G_STRUCT_OFFSET (GstPadClass, linked), NULL, NULL,
-      g_cclosure_marshal_generic, G_TYPE_NONE, 1, GST_TYPE_PAD);
+      gst_closure_marshal_VOID__POINTER, G_TYPE_NONE, 1, GST_TYPE_PAD);
   /**
    * GstPad::unlinked:
    * @pad: the pad that emitted the signal
@@ -353,7 +353,7 @@ gst_pad_class_init (GstPadClass * klass)
   gst_pad_signals[PAD_UNLINKED] =
       g_signal_new ("unlinked", G_TYPE_FROM_CLASS (klass), G_SIGNAL_RUN_LAST,
       G_STRUCT_OFFSET (GstPadClass, unlinked), NULL, NULL,
-      g_cclosure_marshal_generic, G_TYPE_NONE, 1, GST_TYPE_PAD);
+      gst_closure_marshal_VOID__POINTER, G_TYPE_NONE, 1, GST_TYPE_PAD);
 
   pspec_caps = g_param_spec_boxed ("caps", "Caps",
       "The capabilities of the pad", GST_TYPE_CAPS,
diff --git a/gst/gstpadtemplate.c b/gst/gstpadtemplate.c
--- a/gst/gstpadtemplate.c
+++ b/gst/gstpadtemplate.c
@@ -145,7 +145,7 @@ gst_pad_template_class_init (GstPadTemplateClass * klass)
   gst_pad_template_signals[TEMPL_PAD_CREATED] =
       g_signal_new ("pad-created", G_TYPE_FROM_CLASS (klass), G_SIGNAL_RUN_LAST,
       G_STRUCT_OFFSET (GstPadTemplateClass, pad_created),
-      NULL, NULL, g_cclosure_marshal_generic, G_TYPE_NONE, 1, GST_TYPE_PAD);
+      NULL, NULL, gst_closure_marshal_VOID__POINTER, G_TYPE_NONE, 1, GST_TYPE_PAD);
 
   gobject_class->dispose = gst_pad_template_dispose;
 
diff --git a/gst/gstpoll.c b/gst/gstpoll.c
--- a/gst/gstpoll.c
+++ b/gst/gstpoll.c
@@ -60,6 +60,7 @@
 #include "gst_private.h"
 #include "glib-compat-private.h"
 
+#include <sys/select.h>
 #include <sys/types.h>
 
 #ifdef HAVE_UNISTD_H
@@ -689,8 +690,15 @@ gst_poll_new (gboolean controllable)
   {
     gint control_sock[2];
 
+#if defined(__native_client__)
+    if (pipe (control_sock) < 0) {
+      GST_WARNING ("%p: can't pipe, errno: %d!", nset, errno);
+      goto no_socket_pair;
+    }
+#else
     if (socketpair (PF_UNIX, SOCK_STREAM, 0, control_sock) < 0)
       goto no_socket_pair;
+#endif
 
     nset->control_read_fd.fd = control_sock[0];
     nset->control_write_fd.fd = control_sock[1];
diff --git a/gst/gstregistry.c b/gst/gstregistry.c
--- a/gst/gstregistry.c
+++ b/gst/gstregistry.c
@@ -217,7 +217,7 @@ gst_registry_class_init (GstRegistryClass * klass)
    */
   gst_registry_signals[PLUGIN_ADDED] =
       g_signal_new ("plugin-added", G_TYPE_FROM_CLASS (klass),
-      G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_generic,
+      G_SIGNAL_RUN_LAST, 0, NULL, NULL, gst_closure_marshal_VOID__POINTER,
       G_TYPE_NONE, 1, GST_TYPE_PLUGIN);
 
   /**
@@ -230,7 +230,7 @@ gst_registry_class_init (GstRegistryClass * klass)
    */
   gst_registry_signals[FEATURE_ADDED] =
       g_signal_new ("feature-added", G_TYPE_FROM_CLASS (klass),
-      G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_generic,
+      G_SIGNAL_RUN_LAST, 0, NULL, NULL, gst_closure_marshal_VOID__POINTER,
       G_TYPE_NONE, 1, GST_TYPE_PLUGIN_FEATURE);
 
   gobject_class->finalize = gst_registry_finalize;
diff --git a/gst/gststreamcollection.c b/gst/gststreamcollection.c
--- a/gst/gststreamcollection.c
+++ b/gst/gststreamcollection.c
@@ -125,7 +125,7 @@ gst_stream_collection_class_init (GstStreamCollectionClass * klass)
       g_signal_new ("stream-notify", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_FIRST | G_SIGNAL_NO_RECURSE | G_SIGNAL_DETAILED |
       G_SIGNAL_NO_HOOKS, G_STRUCT_OFFSET (GstStreamCollectionClass,
-          stream_notify), NULL, NULL, g_cclosure_marshal_generic, G_TYPE_NONE,
+          stream_notify), NULL, NULL, gst_closure_marshal_VOID__POINTER_POINTER, G_TYPE_NONE,
       2, GST_TYPE_STREAM, G_TYPE_PARAM);
 
   gobject_class->dispose = gst_stream_collection_dispose;
diff --git a/gst/gstutils.c b/gst/gstutils.c
--- a/gst/gstutils.c
+++ b/gst/gstutils.c
@@ -4310,3 +4310,215 @@ invalid:
     return FALSE;
   }
 }
+
+void gst_closure_marshal_BOOLEAN__VOID(
+    GClosure     *closure,
+    GValue       *return_value,
+    guint         n_param_values,
+    const GValue *param_values,
+    gpointer      invocation_hint,
+    gpointer      marshal_data) {
+  typedef gboolean (*GMarshalFunc_BOOLEAN__VOID) (gpointer     data1,
+                                                  gpointer     data2);
+  GMarshalFunc_BOOLEAN__VOID callback;
+  GCClosure *cc = (GCClosure*) closure;
+  gpointer data1, data2;
+  gboolean v_return;
+
+  g_return_if_fail (return_value != NULL);
+  g_return_if_fail (n_param_values == 1);
+
+  if (G_CCLOSURE_SWAP_DATA (closure))
+    {
+      data1 = closure->data;
+      data2 = g_value_peek_pointer (param_values + 0);
+    }
+  else
+    {
+      data1 = g_value_peek_pointer (param_values + 0);
+      data2 = closure->data;
+    }
+  callback = (GMarshalFunc_BOOLEAN__VOID) (marshal_data ? marshal_data : cc->callback);
+
+  v_return = callback (data1,
+                       data2);
+
+  g_value_set_boolean (return_value, v_return);
+}
+
+void gst_closure_marshal_ENUM__VOID(
+    GClosure     *closure,
+    GValue       *return_value,
+    guint         n_param_values,
+    const GValue *param_values,
+    gpointer      invocation_hint,
+    gpointer      marshal_data) {
+  typedef gint (*GMarshalFunc_ENUM__VOID) (gpointer     data1,
+                                           gpointer     data2);
+  GMarshalFunc_ENUM__VOID callback;
+  GCClosure *cc = (GCClosure*) closure;
+  gpointer data1, data2;
+  gint v_return;
+
+  g_return_if_fail (return_value != NULL);
+  g_return_if_fail (n_param_values == 1);
+
+  if (G_CCLOSURE_SWAP_DATA (closure))
+    {
+      data1 = closure->data;
+      data2 = g_value_peek_pointer (param_values + 0);
+    }
+  else
+    {
+      data1 = g_value_peek_pointer (param_values + 0);
+      data2 = closure->data;
+    }
+  callback = (GMarshalFunc_ENUM__VOID) (marshal_data ? marshal_data : cc->callback);
+
+  v_return = callback (data1,
+                       data2);
+
+  g_value_set_enum (return_value, v_return);
+}
+
+void gst_closure_marshal_POINTER__VOID(
+    GClosure     *closure,
+    GValue       *return_value,
+    guint         n_param_values,
+    const GValue *param_values,
+    gpointer      invocation_hint,
+    gpointer      marshal_data) {
+  typedef gpointer (*GMarshalFunc_POINTER__VOID) (gpointer     data1,
+                                                  gpointer     data2);
+  GMarshalFunc_POINTER__VOID callback;
+  GCClosure *cc = (GCClosure*) closure;
+  gpointer data1, data2;
+  gpointer v_return;
+
+  g_return_if_fail (return_value != NULL);
+  g_return_if_fail (n_param_values == 1);
+
+  if (G_CCLOSURE_SWAP_DATA (closure))
+    {
+      data1 = closure->data;
+      data2 = g_value_peek_pointer (param_values + 0);
+    }
+  else
+    {
+      data1 = g_value_peek_pointer (param_values + 0);
+      data2 = closure->data;
+    }
+  callback = (GMarshalFunc_POINTER__VOID) (marshal_data ? marshal_data : cc->callback);
+
+  v_return = callback (data1,
+                       data2);
+
+  g_value_set_pointer (return_value, v_return);
+}
+
+void gst_closure_marshal_VOID__POINTER(
+    GClosure     *closure,
+    GValue       *return_value,
+    guint         n_param_values,
+    const GValue *param_values,
+    gpointer      invocation_hint,
+    gpointer      marshal_data) {
+  typedef void (*GMarshalFunc_VOID__POINTER) (gpointer     data1,
+                                              gpointer     arg_1,
+                                              gpointer     data2);
+  GMarshalFunc_VOID__POINTER callback;
+  GCClosure *cc = (GCClosure*) closure;
+  gpointer data1, data2;
+
+  g_return_if_fail (return_value != NULL);
+  g_return_if_fail (n_param_values == 2);
+
+  if (G_CCLOSURE_SWAP_DATA (closure))
+    {
+      data1 = closure->data;
+      data2 = g_value_peek_pointer (param_values + 0);
+    }
+  else
+    {
+      data1 = g_value_peek_pointer (param_values + 0);
+      data2 = closure->data;
+    }
+  callback = (GMarshalFunc_VOID__POINTER) (marshal_data ? marshal_data : cc->callback);
+
+  callback (data1,
+            g_value_peek_pointer (param_values + 1),
+            data2);
+}
+
+void gst_closure_marshal_ENUM__POINTER(
+    GClosure     *closure,
+    GValue       *return_value,
+    guint         n_param_values,
+    const GValue *param_values,
+    gpointer      invocation_hint,
+    gpointer      marshal_data) {
+  typedef gint (*GMarshalFunc_ENUM__POINTER) (gpointer     data1,
+                                              gpointer     arg_1,
+                                              gpointer     data2);
+  GMarshalFunc_ENUM__POINTER callback;
+  GCClosure *cc = (GCClosure*) closure;
+  gpointer data1, data2;
+  gint v_return;
+
+  g_return_if_fail (return_value != NULL);
+  g_return_if_fail (n_param_values == 2);
+
+  if (G_CCLOSURE_SWAP_DATA (closure))
+    {
+      data1 = closure->data;
+      data2 = g_value_peek_pointer (param_values + 0);
+    }
+  else
+    {
+      data1 = g_value_peek_pointer (param_values + 0);
+      data2 = closure->data;
+    }
+  callback = (GMarshalFunc_ENUM__POINTER) (marshal_data ? marshal_data : cc->callback);
+
+  v_return = callback (data1,
+                       g_value_peek_pointer (param_values + 1),
+                       data2);
+
+  g_value_set_enum (return_value, v_return);
+}
+
+void gst_closure_marshal_VOID__POINTER_POINTER(
+    GClosure     *closure,
+    GValue       *return_value,
+    guint         n_param_values,
+    const GValue *param_values,
+    gpointer      invocation_hint,
+    gpointer      marshal_data)
+{
+  typedef void   (*GMarshalFunc_VOID__OBJECT_POINTER) (gpointer     data1,
+                                                       gpointer     arg_1,
+                                                       gpointer     arg_2,
+                                                       gpointer     data2);
+  GMarshalFunc_VOID__OBJECT_POINTER callback;
+  GCClosure *cc = (GCClosure*) closure;
+  gpointer data1, data2;
+
+  g_return_if_fail (n_param_values == 3);
+
+  if (G_CCLOSURE_SWAP_DATA (closure))
+    {
+      data1 = closure->data;
+      data2 = g_value_peek_pointer (param_values + 0);
+    }
+  else
+    {
+      data1 = g_value_peek_pointer (param_values + 0);
+      data2 = closure->data;
+    }
+  callback = (GMarshalFunc_VOID__OBJECT_POINTER) (marshal_data ? marshal_data : cc->callback);
+
+  callback (data1,
+            g_value_peek_pointer (param_values + 1),
+            g_value_peek_pointer (param_values + 2),
+            data2);
+}
diff --git a/gst/gstutils.h b/gst/gstutils.h
--- a/gst/gstutils.h
+++ b/gst/gstutils.h
@@ -1062,6 +1062,57 @@ gboolean      gst_calculate_linear_regression   (const GstClockTime * xy,
                                                  gdouble * r_squared);
 
 
+/* GClosure custom marshallers */
+#include <glib.h>
+
+void gst_closure_marshal_BOOLEAN__VOID(
+    GClosure     *closure,
+    GValue       *return_value,
+    guint         n_param_values,
+    const GValue *param_values,
+    gpointer      invocation_hint,
+    gpointer      marshal_data);
+
+void gst_closure_marshal_ENUM__VOID(
+    GClosure     *closure,
+    GValue       *return_value,
+    guint         n_param_values,
+    const GValue *param_values,
+    gpointer      invocation_hint,
+    gpointer      marshal_data);
+
+void gst_closure_marshal_POINTER__VOID(
+    GClosure     *closure,
+    GValue       *return_value,
+    guint         n_param_values,
+    const GValue *param_values,
+    gpointer      invocation_hint,
+    gpointer      marshal_data);
+
+void gst_closure_marshal_VOID__POINTER(
+    GClosure     *closure,
+    GValue       *return_value,
+    guint         n_param_values,
+    const GValue *param_values,
+    gpointer      invocation_hint,
+    gpointer      marshal_data);
+
+void gst_closure_marshal_ENUM__POINTER(
+    GClosure     *closure,
+    GValue       *return_value,
+    guint         n_param_values,
+    const GValue *param_values,
+    gpointer      invocation_hint,
+    gpointer      marshal_data);
+
+void gst_closure_marshal_VOID__POINTER_POINTER(
+    GClosure     *closure,
+    GValue       *return_value,
+    guint         n_param_values,
+    const GValue *param_values,
+    gpointer      invocation_hint,
+    gpointer      marshal_data);
+
 G_END_DECLS
 
 #endif /* __GST_UTILS_H__ */
diff --git a/libs/gst/base/gstindex.c b/libs/gst/base/gstindex.c
--- a/libs/gst/base/gstindex.c
+++ b/libs/gst/base/gstindex.c
@@ -161,7 +161,7 @@ gst_index_class_init (GstIndexClass * klass)
   gst_index_signals[ENTRY_ADDED] =
       g_signal_new ("entry-added", G_TYPE_FROM_CLASS (klass), G_SIGNAL_RUN_LAST,
       G_STRUCT_OFFSET (GstIndexClass, entry_added), NULL, NULL,
-      g_cclosure_marshal_generic, G_TYPE_NONE, 1, GST_TYPE_INDEX_ENTRY);
+      gst_closure_marshal_VOID__POINTER, G_TYPE_NONE, 1, GST_TYPE_INDEX_ENTRY);
 
   gobject_class->set_property = gst_index_set_property;
   gobject_class->get_property = gst_index_get_property;
diff --git a/libs/gst/controller/gsttimedvaluecontrolsource.c b/libs/gst/controller/gsttimedvaluecontrolsource.c
--- a/libs/gst/controller/gsttimedvaluecontrolsource.c
+++ b/libs/gst/controller/gsttimedvaluecontrolsource.c
@@ -471,7 +471,7 @@ gst_timed_value_control_source_class_init (GstTimedValueControlSourceClass
   gst_timed_value_control_source_signals[VALUE_CHANGED_SIGNAL] =
       g_signal_new ("value-changed", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_FIRST, 0, NULL,
-      NULL, g_cclosure_marshal_generic, G_TYPE_NONE, 1,
+      NULL, gst_closure_marshal_VOID__POINTER, G_TYPE_NONE, 1,
       gst_control_point_get_type ());
 
   /**
@@ -487,7 +487,7 @@ gst_timed_value_control_source_class_init (GstTimedValueControlSourceClass
   gst_timed_value_control_source_signals[VALUE_ADDED_SIGNAL] =
       g_signal_new ("value-added", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_FIRST, 0, NULL,
-      NULL, g_cclosure_marshal_generic, G_TYPE_NONE, 1,
+      NULL, gst_closure_marshal_VOID__POINTER, G_TYPE_NONE, 1,
       gst_control_point_get_type ());
 
   /**
@@ -503,7 +503,7 @@ gst_timed_value_control_source_class_init (GstTimedValueControlSourceClass
   gst_timed_value_control_source_signals[VALUE_REMOVED_SIGNAL] =
       g_signal_new ("value-removed", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_FIRST, 0, NULL,
-      NULL, g_cclosure_marshal_generic, G_TYPE_NONE, 1,
+      NULL, gst_closure_marshal_VOID__POINTER, G_TYPE_NONE, 1,
       gst_control_point_get_type ());
 
 
diff --git a/plugins/elements/gstfakesink.c b/plugins/elements/gstfakesink.c
--- a/plugins/elements/gstfakesink.c
+++ b/plugins/elements/gstfakesink.c
@@ -207,7 +207,7 @@ gst_fake_sink_class_init (GstFakeSinkClass * klass)
   gst_fake_sink_signals[SIGNAL_HANDOFF] =
       g_signal_new ("handoff", G_TYPE_FROM_CLASS (klass), G_SIGNAL_RUN_LAST,
       G_STRUCT_OFFSET (GstFakeSinkClass, handoff), NULL, NULL,
-      g_cclosure_marshal_generic, G_TYPE_NONE, 2,
+      gst_closure_marshal_VOID__POINTER_POINTER, G_TYPE_NONE, 2,
       GST_TYPE_BUFFER | G_SIGNAL_TYPE_STATIC_SCOPE, GST_TYPE_PAD);
 
   /**
@@ -221,7 +221,7 @@ gst_fake_sink_class_init (GstFakeSinkClass * klass)
   gst_fake_sink_signals[SIGNAL_PREROLL_HANDOFF] =
       g_signal_new ("preroll-handoff", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_LAST, G_STRUCT_OFFSET (GstFakeSinkClass, preroll_handoff),
-      NULL, NULL, g_cclosure_marshal_generic, G_TYPE_NONE, 2,
+      NULL, NULL, gst_closure_marshal_VOID__POINTER_POINTER, G_TYPE_NONE, 2,
       GST_TYPE_BUFFER | G_SIGNAL_TYPE_STATIC_SCOPE, GST_TYPE_PAD);
 
   gst_element_class_set_static_metadata (gstelement_class,
diff --git a/plugins/elements/gstfakesrc.c b/plugins/elements/gstfakesrc.c
--- a/plugins/elements/gstfakesrc.c
+++ b/plugins/elements/gstfakesrc.c
@@ -332,7 +332,7 @@ gst_fake_src_class_init (GstFakeSrcClass * klass)
   gst_fake_src_signals[SIGNAL_HANDOFF] =
       g_signal_new ("handoff", G_TYPE_FROM_CLASS (klass), G_SIGNAL_RUN_LAST,
       G_STRUCT_OFFSET (GstFakeSrcClass, handoff), NULL, NULL,
-      g_cclosure_marshal_generic, G_TYPE_NONE, 2,
+      gst_closure_marshal_VOID__POINTER_POINTER, G_TYPE_NONE, 2,
       GST_TYPE_BUFFER | G_SIGNAL_TYPE_STATIC_SCOPE, GST_TYPE_PAD);
 
   gst_element_class_set_static_metadata (gstelement_class,
diff --git a/plugins/elements/gstidentity.c b/plugins/elements/gstidentity.c
--- a/plugins/elements/gstidentity.c
+++ b/plugins/elements/gstidentity.c
@@ -241,7 +241,7 @@ gst_identity_class_init (GstIdentityClass * klass)
   gst_identity_signals[SIGNAL_HANDOFF] =
       g_signal_new ("handoff", G_TYPE_FROM_CLASS (klass), G_SIGNAL_RUN_LAST,
       G_STRUCT_OFFSET (GstIdentityClass, handoff), NULL, NULL,
-      g_cclosure_marshal_generic, G_TYPE_NONE, 1,
+      gst_closure_marshal_VOID__POINTER, G_TYPE_NONE, 1,
       GST_TYPE_BUFFER | G_SIGNAL_TYPE_STATIC_SCOPE);
 
   gobject_class->finalize = gst_identity_finalize;
diff --git a/plugins/elements/gsttypefindelement.c b/plugins/elements/gsttypefindelement.c
--- a/plugins/elements/gsttypefindelement.c
+++ b/plugins/elements/gsttypefindelement.c
@@ -274,7 +274,7 @@ gst_type_find_element_class_init (GstTypeFindElementClass * typefind_class)
   gst_type_find_element_signals[HAVE_TYPE] = g_signal_new ("have-type",
       G_TYPE_FROM_CLASS (typefind_class), G_SIGNAL_RUN_LAST,
       G_STRUCT_OFFSET (GstTypeFindElementClass, have_type), NULL, NULL,
-      g_cclosure_marshal_generic, G_TYPE_NONE, 2,
+      g_cclosure_marshal_VOID__UINT_POINTER, G_TYPE_NONE, 2,
       G_TYPE_UINT, GST_TYPE_CAPS | G_SIGNAL_TYPE_STATIC_SCOPE);
 
   typefind_class->have_type =
diff --git a/plugins/tracers/gstrusage.c b/plugins/tracers/gstrusage.c
--- a/plugins/tracers/gstrusage.c
+++ b/plugins/tracers/gstrusage.c
@@ -276,10 +276,12 @@ gst_rusage_tracer_class_init (GstRUsageTracerClass * klass)
 
   if ((num_cpus = sysconf (_SC_NPROCESSORS_ONLN)) == -1) {
     GST_WARNING ("failed to get number of cpus online");
+#if !defined(__native_client__)
     if ((num_cpus = sysconf (_SC_NPROCESSORS_CONF)) == -1) {
       GST_WARNING ("failed to get number of cpus, assuming 1");
       num_cpus = 1;
     }
+#endif
   }
   GST_DEBUG ("rusage: num_cpus=%ld", num_cpus);
 
