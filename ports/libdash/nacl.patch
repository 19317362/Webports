diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..81d594c
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,3 @@
+cmake_minimum_required(VERSION 2.8)
+
+add_subdirectory(libdash)
diff --git a/libdash/CMakeLists.txt b/libdash/CMakeLists.txt
index 80f426b..852dd9e 100644
--- a/libdash/CMakeLists.txt
+++ b/libdash/CMakeLists.txt
@@ -1,10 +1,10 @@
 cmake_minimum_required(VERSION 2.8)
 
-include_directories(libxml2/include)
+include_directories(SYSTEM libxml2/include)
 include_directories(libdash/include)
-include_directories(sdl/include)
-include_directories(zlib/include)
-include_directories(iconv/include)
+include_directories(SYSTEM sdl/include)
+include_directories(SYSTEM zlib/include)
+include_directories(SYSTEM iconv/include)
 
 set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
 set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
diff --git a/libdash/libdash/CMakeLists.txt b/libdash/libdash/CMakeLists.txt
dissimilarity index 65%
index aeae94f..bfd62db 100644
--- a/libdash/libdash/CMakeLists.txt
+++ b/libdash/libdash/CMakeLists.txt
@@ -1,14 +1,18 @@
-cmake_minimum_required(VERSION 2.8)
-
-find_package(LibXml2 REQUIRED)
-find_package(ZLIB REQUIRED)
-find_package(CURL REQUIRED)
-
-
-include_directories(include)
-
-
-file(GLOB_RECURSE libdash_source *.cpp)
-
-add_library(dash SHARED ${libdash_source})
-target_link_libraries(dash ${CURL_LIBRARIES} ${ZLIB_LIBRARIES} ${LIBXML2_LIBRARIES})
\ No newline at end of file
+cmake_minimum_required(VERSION 2.8)
+
+include_directories(include)
+
+
+file(GLOB_RECURSE libdash_source *.cpp)
+
+add_library(dash STATIC ${libdash_source})
+#target_link_libraries(dash ${CURL_LIBRARIES} ${ZLIB_LIBRARIES} ${LIBXML2_LIBRARIES})
+
+target_link_libraries(dash curl ssl crypto xml2 z)
+
+if ($ENV{NACL_ARCH} STREQUAL "pnacl")
+    target_link_libraries(dash nacl_io)
+endif ()
+
+install(TARGETS dash DESTINATION lib)
+install(DIRECTORY include/ DESTINATION include/libdash)
\ No newline at end of file
diff --git a/libdash/libdash/source/mpd/Segment.cpp b/libdash/libdash/source/mpd/Segment.cpp
index 3120076..de07a31 100644
--- a/libdash/libdash/source/mpd/Segment.cpp
+++ b/libdash/libdash/source/mpd/Segment.cpp
@@ -43,7 +43,7 @@ bool                Segment::Init               (const std::vector<IBaseUrl *>&
 
     this->absoluteuri = Path::CombinePaths(this->absoluteuri, uri);
 
-    if (uri != "" && dash::helpers::Path::GetHostPortAndPath(this->absoluteuri, host, port, path))
+    if (this->absoluteuri != "" && dash::helpers::Path::GetHostPortAndPath(this->absoluteuri, host, port, path))
     {
         this->host = host;
         this->port = port;
diff --git a/libdash/libdash_networkpart_test/CMakeLists.txt b/libdash/libdash_networkpart_test/CMakeLists.txt
index 355a4f4..1ae4660 100644
--- a/libdash/libdash_networkpart_test/CMakeLists.txt
+++ b/libdash/libdash_networkpart_test/CMakeLists.txt
@@ -4,4 +4,10 @@ cmake_minimum_required(VERSION 2.8)
 file(GLOB_RECURSE networkpart_source *.cpp)
 
 add_executable(libdash_networkpart_test ${networkpart_source})
-target_link_libraries(libdash_networkpart_test dash)
\ No newline at end of file
+target_link_libraries(libdash_networkpart_test dash)
+
+target_link_libraries(libdash_networkpart_test curl ssl crypto xml2 z)
+
+if ($ENV{NACL_ARCH} STREQUAL "pnacl")
+    target_link_libraries(libdash_networkpart_test nacl_io)
+endif ()
diff --git a/libdash/libdash/source/manager/DASHManager.cpp b/libdash/libdash/source/manager/DASHManager.cpp
index 5181233..ef45594 100644
--- a/libdash/libdash/source/manager/DASHManager.cpp
+++ b/libdash/libdash/source/manager/DASHManager.cpp
@@ -25,6 +25,7 @@ DASHManager::~DASHManager           ()
 }
 IMPD*           DASHManager::Open   (char *path)
 {
+    curl_global_init(CURL_GLOBAL_ALL);
     DOMParser parser(path);

     uint32_t fetchTime = Time::GetCurrentUTCTimeInSec();
@@ -41,5 +42,6 @@ IMPD*           DASHManager::Open   (char *path)
 }
 void            DASHManager::Delete ()
 {
+    curl_global_cleanup();
     delete this;
 }
diff --git a/libdash/libdash/source/network/AbstractChunk.cpp b/libdash/libdash/source/network/AbstractChunk.cpp
index 0c3ed79..dee8b42 100644
--- a/libdash/libdash/source/network/AbstractChunk.cpp
+++ b/libdash/libdash/source/network/AbstractChunk.cpp
@@ -40,8 +40,6 @@ bool    AbstractChunk::StartDownload                ()
     if(this->stateManager.State() != NOT_STARTED)
         return false;

-    curl_global_init(CURL_GLOBAL_ALL);
-
     this->curl = curl_easy_init();
     curl_easy_setopt(this->curl, CURLOPT_URL, this->AbsoluteURI().c_str());
     curl_easy_setopt(this->curl, CURLOPT_WRITEFUNCTION, CurlResponseCallback);
@@ -150,7 +148,6 @@ void*   AbstractChunk::DownloadInternalConnection   (void *abstractchunk)
     chunk->response = curl_easy_perform(chunk->curl);

     curl_easy_cleanup(chunk->curl);
-    curl_global_cleanup();

     if(chunk->stateManager.State() == REQUEST_ABORT)
         chunk->stateManager.State(ABORTED);
