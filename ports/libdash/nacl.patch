diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..81d594c
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,3 @@
+cmake_minimum_required(VERSION 2.8)
+
+add_subdirectory(libdash)
diff --git a/libdash/CMakeLists.txt b/libdash/CMakeLists.txt
index 80f426b..852dd9e 100644
--- a/libdash/CMakeLists.txt
+++ b/libdash/CMakeLists.txt
@@ -1,10 +1,10 @@
 cmake_minimum_required(VERSION 2.8)
 
-include_directories(libxml2/include)
+include_directories(SYSTEM libxml2/include)
 include_directories(libdash/include)
-include_directories(sdl/include)
-include_directories(zlib/include)
-include_directories(iconv/include)
+include_directories(SYSTEM sdl/include)
+include_directories(SYSTEM zlib/include)
+include_directories(SYSTEM iconv/include)
 
 set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
 set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
diff --git a/libdash/libdash/CMakeLists.txt b/libdash/libdash/CMakeLists.txt
dissimilarity index 65%
index aeae94f..0a5bc9a 100644
--- a/libdash/libdash/CMakeLists.txt
+++ b/libdash/libdash/CMakeLists.txt
@@ -1,14 +1,17 @@
-cmake_minimum_required(VERSION 2.8)
-
-find_package(LibXml2 REQUIRED)
-find_package(ZLIB REQUIRED)
-find_package(CURL REQUIRED)
-
-
-include_directories(include)
-
-
-file(GLOB_RECURSE libdash_source *.cpp)
-
-add_library(dash SHARED ${libdash_source})
-target_link_libraries(dash ${CURL_LIBRARIES} ${ZLIB_LIBRARIES} ${LIBXML2_LIBRARIES})
\ No newline at end of file
+cmake_minimum_required(VERSION 2.8)
+
+include_directories(include)
+
+
+file(GLOB_RECURSE libdash_source *.cpp)
+
+add_library(dash STATIC ${libdash_source})
+
+target_link_libraries(dash curl ssl crypto xml2 z nacl_io)
+
+if ($ENV{NACL_ARCH} STREQUAL "pnacl")
+    target_link_libraries(dash glibc-compat)
+endif ()
+
+install(TARGETS dash DESTINATION lib)
+install(DIRECTORY include/ DESTINATION include/libdash)
diff --git a/libdash/libdash/include/IDASHManager.h b/libdash/libdash/include/IDASHManager.h
index a2ed381..475ca5b 100644
--- a/libdash/libdash/include/IDASHManager.h
+++ b/libdash/libdash/include/IDASHManager.h
@@ -33,7 +33,16 @@ namespace dash
              *  @param      path    A URI to a MPD file
              *  @return     a pointer to an dash::mpd::IMPD object
              */
-            virtual mpd::IMPD* Open (char *path) = 0;
+            virtual mpd::IMPD* Open (const char *path) = 0;
+
+            /**
+             *  Returns a pointer to dash::mpd::IMPD object representing the the information found in the MPD file specified by \em path but read from a memory buffer
+             *  @param      path    A URI to a MPD file
+             *  @param      buffer  Memory buffer from which data should be read
+             *  @param      size    Buffer size
+             *  @return     a pointer to an dash::mpd::IMPD object
+             */
+            virtual mpd::IMPD* Open (const char* path, const char* buffer, int size) = 0;
 
             /**
              *  Frees allocated memory and deletes the DashManager
diff --git a/libdash/libdash/include/ISegmentTemplate.h b/libdash/libdash/include/ISegmentTemplate.h
index d707295..19fe641 100644
--- a/libdash/libdash/include/ISegmentTemplate.h
+++ b/libdash/libdash/include/ISegmentTemplate.h
@@ -126,7 +126,7 @@ namespace dash
                  *                                  This integer will be formated according to a possibly contained format tag in the \em \$Time\$ identifier.
                  *  @return     a pointer to a dash::mpd::ISegment object
                  */
-                virtual ISegment*           GetMediaSegmentFromTime     (const std::vector<IBaseUrl *>& baseurls, const std::string& representationID, uint32_t bandwidth, uint32_t time) const = 0;
+                virtual ISegment*           GetMediaSegmentFromTime     (const std::vector<IBaseUrl *>& baseurls, const std::string& representationID, uint32_t bandwidth, uint64_t time) const = 0;
 
                 /**
                  *  Returns a pointer to a dash::mpd::ISegment object that represents a Index Segment and can be downloaded.
@@ -140,9 +140,9 @@ namespace dash
                  *                                  This integer will be formated according to a possibly contained format tag in the \em \$Time\$ identifier.
                  *  @return     a pointer to a dash::mpd::ISegment object
                  */
-                virtual ISegment*           GetIndexSegmentFromTime     (const std::vector<IBaseUrl *>& baseurls, const std::string& representationID, uint32_t bandwidth, uint32_t time) const = 0;
+                virtual ISegment*           GetIndexSegmentFromTime     (const std::vector<IBaseUrl *>& baseurls, const std::string& representationID, uint32_t bandwidth, uint64_t time) const = 0;
         };
     }
 }
 
-#endif /* ISEGMENTTEMPLATE_H_ */
\ No newline at end of file
+#endif /* ISEGMENTTEMPLATE_H_ */
diff --git a/libdash/libdash/source/manager/DASHManager.cpp b/libdash/libdash/source/manager/DASHManager.cpp
index 5181233..c2eb11a 100644
--- a/libdash/libdash/source/manager/DASHManager.cpp
+++ b/libdash/libdash/source/manager/DASHManager.cpp
@@ -17,16 +17,9 @@ using namespace dash::mpd;
 using namespace dash::network;
 using namespace dash::helpers;
 
-DASHManager::DASHManager            ()
-{
-}
-DASHManager::~DASHManager           ()
-{
-}
-IMPD*           DASHManager::Open   (char *path)
+namespace {
+IMPD* ParseMPD(DOMParser& parser)
 {
-    DOMParser parser(path);
-
     uint32_t fetchTime = Time::GetCurrentUTCTimeInSec();
 
     if (!parser.Parse())
@@ -39,7 +32,27 @@ IMPD*           DASHManager::Open   (char *path)
 
     return mpd;
 }
+}
+DASHManager::DASHManager            ()
+{
+}
+DASHManager::~DASHManager           ()
+{
+}
+IMPD*           DASHManager::Open   (const char *path)
+{
+    curl_global_init(CURL_GLOBAL_ALL);
+    DOMParser parser(path);
+    return ParseMPD(parser);
+}
+IMPD*           DASHManager::Open   (const char *path, const char* buf, int size)
+{
+    curl_global_init(CURL_GLOBAL_ALL);
+    DOMParser parser(path, buf, size);
+    return ParseMPD(parser);
+}
 void            DASHManager::Delete ()
 {
+    curl_global_cleanup();
     delete this;
 }
diff --git a/libdash/libdash/source/manager/DASHManager.h b/libdash/libdash/source/manager/DASHManager.h
index 1cebea2..5638f6d 100644
--- a/libdash/libdash/source/manager/DASHManager.h
+++ b/libdash/libdash/source/manager/DASHManager.h
@@ -27,7 +27,8 @@ namespace dash
             DASHManager             ();
             virtual ~DASHManager    ();
 
-            mpd::IMPD*  Open    (char *path);
+            mpd::IMPD*  Open    (const char *path);
+            mpd::IMPD*  Open    (const char *path, const char* buffer, int size);
             void        Delete  ();
     };
 }
diff --git a/libdash/libdash/source/mpd/Segment.cpp b/libdash/libdash/source/mpd/Segment.cpp
index 3120076..de07a31 100644
--- a/libdash/libdash/source/mpd/Segment.cpp
+++ b/libdash/libdash/source/mpd/Segment.cpp
@@ -43,7 +43,7 @@ bool                Segment::Init               (const std::vector<IBaseUrl *>&
 
     this->absoluteuri = Path::CombinePaths(this->absoluteuri, uri);
 
-    if (uri != "" && dash::helpers::Path::GetHostPortAndPath(this->absoluteuri, host, port, path))
+    if (this->absoluteuri != "" && dash::helpers::Path::GetHostPortAndPath(this->absoluteuri, host, port, path))
     {
         this->host = host;
         this->port = port;
diff --git a/libdash/libdash/source/mpd/SegmentTemplate.cpp b/libdash/libdash/source/mpd/SegmentTemplate.cpp
index b92c469..26b734d 100644
--- a/libdash/libdash/source/mpd/SegmentTemplate.cpp
+++ b/libdash/libdash/source/mpd/SegmentTemplate.cpp
@@ -73,15 +73,15 @@ ISegment*           SegmentTemplate::GetIndexSegmentFromNumber      (const std::
 {
     return ToSegment(this->index, baseurls, representationID, bandwidth, dash::metrics::IndexSegment, number);
 }
-ISegment*           SegmentTemplate::GetMediaSegmentFromTime        (const std::vector<IBaseUrl *>& baseurls, const std::string& representationID, uint32_t bandwidth, uint32_t time) const
+ISegment*           SegmentTemplate::GetMediaSegmentFromTime        (const std::vector<IBaseUrl *>& baseurls, const std::string& representationID, uint32_t bandwidth, uint64_t time) const
 {
     return ToSegment(this->media, baseurls, representationID, bandwidth, dash::metrics::MediaSegment, 0, time);
 }
-ISegment*           SegmentTemplate::GetIndexSegmentFromTime        (const std::vector<IBaseUrl *>& baseurls, const std::string& representationID, uint32_t bandwidth, uint32_t time) const
+ISegment*           SegmentTemplate::GetIndexSegmentFromTime        (const std::vector<IBaseUrl *>& baseurls, const std::string& representationID, uint32_t bandwidth, uint64_t time) const
 {
     return ToSegment(this->index, baseurls, representationID, bandwidth, dash::metrics::IndexSegment, 0, time);
 }
-std::string         SegmentTemplate::ReplaceParameters              (const std::string& uri, const std::string& representationID, uint32_t bandwidth, uint32_t number, uint32_t time) const
+std::string         SegmentTemplate::ReplaceParameters              (const std::string& uri, const std::string& representationID, uint32_t bandwidth, uint32_t number, uint64_t time) const
 {
     std::vector<std::string> chunks;
     std::string replacedUri = "";
@@ -127,19 +127,22 @@ std::string         SegmentTemplate::ReplaceParameters              (const std::
         return replacedUri;
     }
 }
-void                SegmentTemplate::FormatChunk                    (std::string& uri, uint32_t number) const
+void                SegmentTemplate::FormatChunk                    (std::string& uri, uint64_t number) const
 {
     char formattedNumber [50];
     size_t pos = 0;
-    std::string formatTag = "%01d";
+    std::string formatTag = "%01llu";
 
     if ( (pos = uri.find("%0")) != std::string::npos)
-        formatTag = uri.substr(pos).append("d");
-
+    {
+        formatTag = uri.substr(pos);
+        if (uri.find("d") == std::string::npos && uri.find("u") == std::string::npos)
+            formatTag.append("llu");
+    }
     sprintf(formattedNumber, formatTag.c_str(), number);
     uri = formattedNumber;
 }
-ISegment*           SegmentTemplate::ToSegment                      (const std::string& uri, const std::vector<IBaseUrl *>& baseurls, const std::string& representationID, uint32_t bandwidth, HTTPTransactionType type, uint32_t number, uint32_t time) const
+ISegment*           SegmentTemplate::ToSegment                      (const std::string& uri, const std::vector<IBaseUrl *>& baseurls, const std::string& representationID, uint32_t bandwidth, HTTPTransactionType type, uint32_t number, uint64_t time) const
 {
     Segment *seg = new Segment();
 
@@ -149,4 +152,4 @@ ISegment*           SegmentTemplate::ToSegment                      (const std::
     delete(seg);
 
     return NULL;
-}
\ No newline at end of file
+}
diff --git a/libdash/libdash/source/mpd/SegmentTemplate.h b/libdash/libdash/source/mpd/SegmentTemplate.h
index e5782a8..52aae8a 100644
--- a/libdash/libdash/source/mpd/SegmentTemplate.h
+++ b/libdash/libdash/source/mpd/SegmentTemplate.h
@@ -36,8 +36,8 @@ namespace dash
                 ISegment*           ToBitstreamSwitchingSegment (const std::vector<IBaseUrl *>& baseurls, const std::string& representationID, uint32_t bandwidth) const;
                 ISegment*           GetMediaSegmentFromNumber   (const std::vector<IBaseUrl *>& baseurls, const std::string& representationID, uint32_t bandwidth, uint32_t number) const;
                 ISegment*           GetIndexSegmentFromNumber   (const std::vector<IBaseUrl *>& baseurls, const std::string& representationID, uint32_t bandwidth, uint32_t number) const;
-                ISegment*           GetMediaSegmentFromTime     (const std::vector<IBaseUrl *>& baseurls, const std::string& representationID, uint32_t bandwidth, uint32_t time) const;
-                ISegment*           GetIndexSegmentFromTime     (const std::vector<IBaseUrl *>& baseurls, const std::string& representationID, uint32_t bandwidth, uint32_t time) const;
+                ISegment*           GetMediaSegmentFromTime     (const std::vector<IBaseUrl *>& baseurls, const std::string& representationID, uint32_t bandwidth, uint64_t time) const;
+                ISegment*           GetIndexSegmentFromTime     (const std::vector<IBaseUrl *>& baseurls, const std::string& representationID, uint32_t bandwidth, uint64_t time) const;
 
                 void    SetMedia                (const std::string& media);
                 void    SetIndex                (const std::string& index);
@@ -45,10 +45,10 @@ namespace dash
                 void    SetBitstreamSwitching   (const std::string& bitstreamSwichting);
 
             private:
-                std::string ReplaceParameters   (const std::string& uri, const std::string& representationID, uint32_t bandwidth, uint32_t number, uint32_t time) const;
-                void        FormatChunk         (std::string& uri, uint32_t number) const;
+                std::string ReplaceParameters   (const std::string& uri, const std::string& representationID, uint32_t bandwidth, uint32_t number, uint64_t time) const;
+                void        FormatChunk         (std::string& uri, uint64_t number) const;
                 ISegment*   ToSegment           (const std::string& uri, const std::vector<IBaseUrl *>& baseurls, const std::string& representationID, uint32_t bandwidth, 
-                                                 dash::metrics::HTTPTransactionType type, uint32_t number = 0, uint32_t time = 0) const;
+                                                 dash::metrics::HTTPTransactionType type, uint32_t number = 0, uint64_t time = 0) const;
 
                 std::string media;
                 std::string index;
diff --git a/libdash/libdash/source/network/AbstractChunk.cpp b/libdash/libdash/source/network/AbstractChunk.cpp
index 0c3ed79..dee8b42 100644
--- a/libdash/libdash/source/network/AbstractChunk.cpp
+++ b/libdash/libdash/source/network/AbstractChunk.cpp
@@ -40,8 +40,6 @@ bool    AbstractChunk::StartDownload                ()
     if(this->stateManager.State() != NOT_STARTED)
         return false;
 
-    curl_global_init(CURL_GLOBAL_ALL);
-
     this->curl = curl_easy_init();
     curl_easy_setopt(this->curl, CURLOPT_URL, this->AbsoluteURI().c_str());
     curl_easy_setopt(this->curl, CURLOPT_WRITEFUNCTION, CurlResponseCallback);
@@ -150,7 +148,6 @@ void*   AbstractChunk::DownloadInternalConnection   (void *abstractchunk)
     chunk->response = curl_easy_perform(chunk->curl);
 
     curl_easy_cleanup(chunk->curl);
-    curl_global_cleanup();
 
     if(chunk->stateManager.State() == REQUEST_ABORT)
         chunk->stateManager.State(ABORTED);
diff --git a/libdash/libdash/source/xml/DOMParser.cpp b/libdash/libdash/source/xml/DOMParser.cpp
index e5694f8..6c539dc 100644
--- a/libdash/libdash/source/xml/DOMParser.cpp
+++ b/libdash/libdash/source/xml/DOMParser.cpp
@@ -14,10 +14,21 @@
 using namespace dash::xml;
 using namespace dash::helpers;
 
-DOMParser::DOMParser    (std::string url) :
+DOMParser::DOMParser    (const std::string& url) :
            url          (url),
            reader       (NULL),
-           root         (NULL)
+           root         (NULL),
+           buffer       (NULL),
+           buffer_size  (0)
+{
+    this->Init();
+}
+DOMParser::DOMParser    (const std::string& url, const char* buf, int size) :
+           url          (url),
+           reader       (NULL),
+           root         (NULL),
+           buffer       (buf),
+           buffer_size  (size)
 {
     this->Init();
 }
@@ -33,7 +44,10 @@ Node*   DOMParser::GetRootNode              () const
 }
 bool    DOMParser::Parse                    ()
 {
-    this->reader = xmlReaderForFile(this->url.c_str(), NULL, 0);
+    if(this->buffer)
+        this->reader = xmlReaderForMemory(buffer, buffer_size, this->url.c_str(), NULL, 0);
+    else
+        this->reader = xmlReaderForFile(this->url.c_str(), NULL, 0);
 
     if(this->reader == NULL)
         return false;
diff --git a/libdash/libdash/source/xml/DOMParser.h b/libdash/libdash/source/xml/DOMParser.h
index c005863..49fcc5c 100644
--- a/libdash/libdash/source/xml/DOMParser.h
+++ b/libdash/libdash/source/xml/DOMParser.h
@@ -34,7 +34,8 @@ namespace dash
         class DOMParser
         {
             public:
-                DOMParser           (std::string url);
+                DOMParser           (const std::string& url);
+                DOMParser           (const std::string& url, const char* buf, int size);
                 virtual ~DOMParser  ();
 
                 bool    Parse       ();
@@ -45,6 +46,8 @@ namespace dash
                 xmlTextReaderPtr    reader;
                 Node                *root;
                 std::string         url;
+                const char*         buffer;
+                int                 buffer_size;
 
                 void    Init                    ();
                 Node*   ProcessNode             ();
@@ -53,4 +56,4 @@ namespace dash
         };
     }
 }
-#endif /* DOMPARSER_H_ */
\ No newline at end of file
+#endif /* DOMPARSER_H_ */
diff --git a/libdash/libdash_networkpart_test/CMakeLists.txt b/libdash/libdash_networkpart_test/CMakeLists.txt
index 355a4f4..52c14b0 100644
--- a/libdash/libdash_networkpart_test/CMakeLists.txt
+++ b/libdash/libdash_networkpart_test/CMakeLists.txt
@@ -4,4 +4,13 @@ cmake_minimum_required(VERSION 2.8)
 file(GLOB_RECURSE networkpart_source *.cpp)
 
 add_executable(libdash_networkpart_test ${networkpart_source})
-target_link_libraries(libdash_networkpart_test dash)
\ No newline at end of file
+
+target_link_libraries(libdash_networkpart_test dash curl ssl crypto xml2 z nacl_io)
+
+if ($ENV{NACL_ARCH} STREQUAL "pnacl")
+    target_link_libraries(libdash_networkpart_test)
+endif ()
+
+if ($ENV{TOOLCHAIN} STREQUAL "glibc")
+    SET(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} -lpthread")
+endif ()
