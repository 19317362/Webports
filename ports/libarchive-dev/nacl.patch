diff --git a/libarchive/archive_random.c b/libarchive/archive_random.c
--- a/libarchive/archive_random.c
+++ b/libarchive/archive_random.c
@@ -34,6 +34,10 @@ __FBSDID("$FreeBSD$");
 
 #ifdef HAVE_FCNTL
 #include <fcntl.h>
+// TODO(cmihail): If possible remove this workaround for O_CLOEXEC.
+#ifndef O_CLOEXEC
+#define O_CLOEXEC 0
+#endif
 #endif
 #ifdef HAVE_LIMITS_H
 #include <limits.h>
diff --git a/libarchive_fe/passphrase.c b/libarchive_fe/passphrase.c
--- a/libarchive_fe/passphrase.c
+++ b/libarchive_fe/passphrase.c
@@ -142,7 +142,11 @@ readpassphrase(const char *prompt, char *buf, size_t bufsiz, int flags)
 #  define _POSIX_VDISABLE       VDISABLE
 #endif
 
+#ifdef _NEWLIB_VERSION
+static volatile sig_atomic_t signo[NSIG];
+#else
 static volatile sig_atomic_t signo[_NSIG];
+#endif
 
 static void
 handler(int s)
@@ -168,7 +172,11 @@ readpassphrase(const char *prompt, char *buf, size_t bufsiz, int flags)
 	}
 
 restart:
-	for (i = 0; i < _NSIG; i++)
+#ifdef _NEWLIB_VERSION
+  for (i = 0; i < NSIG; i++)
+#else
+  for (i = 0; i < _NSIG; i++)
+#endif
 		signo[i] = 0;
 	nr = -1;
 	save_errno = 0;
@@ -273,7 +281,11 @@ restart:
 	 * If we were interrupted by a signal, resend it to ourselves
 	 * now that we have restored the signal handlers.
 	 */
-	for (i = 0; i < _NSIG; i++) {
+#ifdef _NEWLIB_VERSION
+  for (i = 0; i < NSIG; i++) {
+#else
+  for (i = 0; i < _NSIG; i++) {
+#endif
 		if (signo[i]) {
 			kill(getpid(), i);
 			switch (i) {
@@ -311,4 +323,3 @@ lafe_readpassphrase(const char *prompt, char *buf, size_t bufsiz)
 	}
 	return (p);
 }
-
