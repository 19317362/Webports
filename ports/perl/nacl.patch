diff --git a/Makefile.SH b/Makefile.SH
--- a/Makefile.SH
+++ b/Makefile.SH
@@ -478,7 +478,11 @@ c3 = taint.c toke.c util.c deb.c run.c universal.c pad.c globals.c keywords.c
 c4 = perlio.c perlapi.c numeric.c mathoms.c locale.c pp_pack.c pp_sort.c caretx.c
 c5 = $(madlysrc) $(mallocsrc)
 
+ifeq  ($(NACL_BUILD), host)
 c = $(c1) $(c2) $(c3) $(c4) $(c5) miniperlmain.c opmini.c perlmini.c
+else
+c = $(c1) $(c2) $(c3) $(c4) $(c5) miniperlmain.c opmini.c perlmini.c perl_pepper.c
+endif
 
 obj0 = op$(OBJ_EXT) perl$(OBJ_EXT)
 obj0mini = perlmini$(OBJ_EXT) opmini$(OBJ_EXT) miniperlmain$(OBJ_EXT)
@@ -489,7 +493,12 @@ obj3 = doop$(OBJ_EXT) doio$(OBJ_EXT) regexec$(OBJ_EXT) utf8$(OBJ_EXT) taint$(OBJ
 minindt_obj = $(obj0mini) $(obj1) $(obj2) $(obj3) $(ARCHOBJS)
 mini_obj = $(minindt_obj) $(MINIDTRACE_O)
 ndt_obj = $(obj0) $(obj1) $(obj2) $(obj3) $(ARCHOBJS)
+
+ifeq  ($(NACL_BUILD), host)
 obj = $(ndt_obj) $(DTRACE_O)
+else
+obj = $(ndt_obj) $(DTRACE_O) perl_pepper$(OBJ_EXT)
+endif
 
 perltoc_pod_prereqs = extra.pods pod/perl5202delta.pod pod/perlapi.pod pod/perlintern.pod pod/perlmodlib.pod pod/perluniprops.pod
 generated_pods = pod/perltoc.pod $(perltoc_pod_prereqs)
diff --git a/Makefile.micro b/Makefile.micro
old mode 100644
new mode 100755
--- a/Makefile.micro
+++ b/Makefile.micro
@@ -1,11 +1,14 @@
 LD = $(CC)
 CCFLAGS = -c
+BUILD_CCFLAGS = -c
 DEFINES = -DPERL_CORE -DPERL_MICRO -DSTANDARD_C -DPERL_USE_SAFE_PUTENV \
 	  -DNO_MATHOMS
 OPTIMIZE = 
 CFLAGS = $(DEFINES) $(OPTIMIZE)
 LDFLAGS = 
+BUILD_LDFLAGS = 
 LIBS = -lm
+BUILD_LIBS = -lm
 _O = .o
 ENV = env
 PERL = perl
@@ -14,7 +17,7 @@ RUN =
 
 all:	microperl
 
-O = uav$(_O) udeb$(_O) udoio$(_O) udoop$(_O) udump$(_O) \
+O = uav$(_O) ucaretx$(_O) udeb$(_O) udoio$(_O) udoop$(_O) udump$(_O) \
 	uglobals$(_O) ugv$(_O) uhv$(_O) umro$(_O)\
 	umg$(_O) uperlmain$(_O) uop$(_O) ureentr$(_O) \
 	upad$(_O) uperl$(_O) uperlio$(_O) uperly$(_O) upp$(_O) \
@@ -66,6 +69,9 @@ perly.h: perly.y
 
 uav$(_O):	$(HE) av.c
 	$(CC) $(CCFLAGS) -o $@ $(CFLAGS) av.c
+	
+ucaretx$(_O):	$(HE) caretx.c
+	$(CC) $(CCFLAGS) -o $@ $(CFLAGS) caretx.c
 
 udeb$(_O):	$(HE) deb.c
 	$(CC) $(CCFLAGS) -o $@ $(CFLAGS) deb.c
@@ -184,10 +190,10 @@ ubitcount.h: ugenerate_uudmap$(_X)
 	$(RUN) ./ugenerate_uudmap$(_X) $(generated_headers)
 
 ugenerate_uudmap$(_O): generate_uudmap.c
-	$(CC) $(CCFLAGS) -o $@ $(CFLAGS) generate_uudmap.c
+	$(BUILD_CC) $(BUILD_CCFLAGS) -o $@ $(CFLAGS) generate_uudmap.c
 
 ugenerate_uudmap$(_X): ugenerate_uudmap$(_O)
-	$(LD) -o ugenerate_uudmap $(LDFLAGS) ugenerate_uudmap$(_O) $(LIBS)
+	$(BUILD_LD) -o ugenerate_uudmap $(BUILD_LDFLAGS) ugenerate_uudmap$(_O) $(BUILD_LIBS)
 
 microtest: microperl
 	- cd t && (rm -f perl; ln -s ../microperl perl) \
diff --git a/ext/ExtUtils-Miniperl/lib/ExtUtils/Miniperl.pm b/ext/ExtUtils-Miniperl/lib/ExtUtils/Miniperl.pm
old mode 100644
new mode 100755
--- a/ext/ExtUtils-Miniperl/lib/ExtUtils/Miniperl.pm
+++ b/ext/ExtUtils-Miniperl/lib/ExtUtils/Miniperl.pm
@@ -89,11 +89,19 @@ struct perl_vars* Perl_GetVarsPrivate(void) { return my_plvarsp; }
 #ifdef NO_ENV_ARRAY_IN_MAIN
 extern char **environ;
 int
+#ifdef __native_client__
+nacl_perl_main(int argc, char **argv)
+#else
 main(int argc, char **argv)
+#endif
 #else
 int
+#ifdef __native_client__
+nacl_perl_main(int argc, char **argv, char **env)
+#else
 main(int argc, char **argv, char **env)
 #endif
+#endif
 {
     int exitstatus, i;
 #ifdef PERL_GLOBAL_STRUCT
diff --git a/lib/ExtUtils/t/Embed.t b/lib/ExtUtils/t/Embed.t
old mode 100644
new mode 100755
--- a/lib/ExtUtils/t/Embed.t
+++ b/lib/ExtUtils/t/Embed.t
@@ -168,11 +168,20 @@ struct perl_vars* Perl_GetVarsPrivate(void) { return my_plvarsp; }
 #endif
 
 #ifdef NO_ENV_ARRAY_IN_MAIN
+#ifdef __native_client__
+int nacl_perl_main(int argc, char **argv) {
+    char **env;
+#else
 int main(int argc, char **argv) {
     char **env;
+#endif
+#else
+#ifdef __native_client__
+int nacl_perl_main(int argc, char **argv, char **env) {
 #else
 int main(int argc, char **argv, char **env) {
 #endif
+#endif
     PerlInterpreter *my_perl;
 #ifdef PERL_GLOBAL_STRUCT
     struct perl_vars *my_vars = init_global_struct();
diff --git a/perl.h b/perl.h
old mode 100644
new mode 100755
--- a/perl.h
+++ b/perl.h
@@ -3561,7 +3561,7 @@ my_swap16(const U16 x) {
 #endif
 
 #ifndef __cplusplus
-#if !(defined(WIN32) || defined(UNDER_CE) || defined(SYMBIAN))
+#if !(defined(WIN32) || defined(UNDER_CE) || defined(SYMBIAN) || defined(__native_client__))
 Uid_t getuid (void);
 Uid_t geteuid (void);
 Gid_t getgid (void);
diff --git a/pod/Makefile.SH b/pod/Makefile.SH
old mode 100644
new mode 100755
diff --git a/pp_sys.c b/pp_sys.c
old mode 100644
new mode 100755
--- a/pp_sys.c
+++ b/pp_sys.c
@@ -32,6 +32,10 @@
 #include "time64.h"
 #include "time64.c"
 
+#if defined(__native_client__)
+#include <spawn.h>
+#endif
+
 #ifdef I_SHADOW
 /* Shadow password support for solaris - pdo@cs.umd.edu
  * Not just Solaris: at least HP-UX, IRIX, Linux.
@@ -4114,7 +4118,7 @@ PP(pp_system)
 	TAINT_PROPER("system");
     }
     PERL_FLUSHALL_FOR_CHILD;
-#if (defined(HAS_FORK) || defined(AMIGAOS)) && !defined(VMS) && !defined(OS2) || defined(PERL_MICRO)
+#if (defined(HAS_FORK) || defined(AMIGAOS)) && !defined(VMS) && !defined(__native_client__) && !defined(OS2) || defined(PERL_MICRO)
     {
 	Pid_t childpid;
 	int pp[2];
@@ -4213,26 +4217,58 @@ PP(pp_system)
 	}
 	PerlProc__exit(-1);
     }
-#else /* ! FORK or VMS or OS/2 */
+#else /* ! FORK or VMS or OS/2 or NaCl */
     PL_statusvalue = 0;
     result = 0;
+    char * args[(SP-MARK)+3];
+    args[0] = "bash";
+    args[1] = "-c";
+    int index = 2;
+    while (++MARK <= SP) {
+        if (*MARK) 
+            args[index++] = SvPV_nolen(*MARK);
+        else
+            args[index++] = "";
+    }
+    args[index] = NULL;
     if (PL_op->op_flags & OPf_STACKED) {
 	SV * const really = *++MARK;
 #  if defined(WIN32) || defined(OS2) || defined(__SYMBIAN32__) || defined(__VMS)
 	value = (I32)do_aspawn(really, MARK, SP);
 #  else
+#  if defined(__native_client__)
+        /* In subsequent spawnv's, ideally "really"
+         * should be first checked. If it is not NULL,
+         * then it should be used instead of args[0]
+         * But I'm replacing with args[0] or "bash",
+         * since it always works.
+         */
+        value = (I32)spawnv(P_WAIT, args[0], args); 
+#  else
 	value = (I32)do_aspawn(really, (void **)MARK, (void **)SP);
 #  endif
+#  endif
     }
     else if (SP - MARK != 1) {
 #  if defined(WIN32) || defined(OS2) || defined(__SYMBIAN32__) || defined(__VMS)
 	value = (I32)do_aspawn(NULL, MARK, SP);
 #  else
+#  if defined(__native_client__)
+        /*
+         * "really" is NULL.
+         */
+        value = (I32)spawnv(P_WAIT, args[0], args);
+#  else
 	value = (I32)do_aspawn(NULL, (void **)MARK, (void **)SP);
 #  endif
+#  endif
     }
     else {
+#  if defined(__native_client__)
+        value = (I32)spawnv(P_WAIT, args[0], args);
+#  else
 	value = (I32)do_spawn(SvPVx_nolen(sv_mortalcopy(*SP)));
+#  endif
     }
     if (PL_statusvalue == -1)	/* hint that value must be returned as is */
 	result = 1;
diff --git a/x2p/a2py.c b/x2p/a2py.c
old mode 100644
new mode 100755
--- a/x2p/a2py.c
+++ b/x2p/a2py.c
@@ -57,7 +57,11 @@ usage()
 #endif
 
 int
+#ifdef __native_client__
+nacl_main(int argc, const char **argv)
+#else
 main(int argc, const char **argv)
+#endif
 {
     STR *str;
     int i;
