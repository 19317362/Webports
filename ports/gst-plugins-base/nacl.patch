diff --git a/gst-libs/gst/video/video-format.c b/gst-libs/gst/video/video-format.c
--- a/gst-libs/gst/video/video-format.c
+++ b/gst-libs/gst/video/video-format.c
@@ -322,9 +322,11 @@ unpack_VYUY (const GstVideoFormatInfo * info, GstVideoPackFlags flags,
     width--;
   }
 
+#if !defined(__native_client__)
   if (IS_ALIGNED (d, 8))
     video_orc_unpack_VYUY (d, s, width / 2);
   else {
+#endif
     gint i;
 
     for (i = 0; i < width / 2; i++) {
@@ -337,7 +339,9 @@ unpack_VYUY (const GstVideoFormatInfo * info, GstVideoPackFlags flags,
       d[i * 8 + 6] = s[i * 4 + 0];
       d[i * 8 + 7] = s[i * 4 + 2];
     }
+#if !defined(__native_client__)
   }
+#endif
 
   if (width & 1) {
     gint i = width - 1;
@@ -358,9 +362,11 @@ pack_VYUY (const GstVideoFormatInfo * info, GstVideoPackFlags flags,
   guint8 *restrict d = GET_LINE (y);
   const guint8 *restrict s = src;
 
+#if !defined(__native_client__)
   if (IS_ALIGNED (s, 8))
     video_orc_pack_VYUY (d, s, width / 2);
   else {
+#endif
     gint i;
     for (i = 0; i < width / 2; i++) {
       d[i * 4 + 0] = s[i * 8 + 2];
@@ -368,7 +374,9 @@ pack_VYUY (const GstVideoFormatInfo * info, GstVideoPackFlags flags,
       d[i * 4 + 2] = s[i * 8 + 3];
       d[i * 4 + 3] = s[i * 8 + 5];
     }
+#if !defined(__native_client__)
   }
+#endif
   if (width & 1) {
     gint i = width - 1;
 
diff --git a/gst-libs/gst/app/gstappsink.c b/gst-libs/gst/app/gstappsink.c
--- a/gst-libs/gst/app/gstappsink.c
+++ b/gst-libs/gst/app/gstappsink.c
@@ -274,7 +274,7 @@ gst_app_sink_class_init (GstAppSinkClass * klass)
   gst_app_sink_signals[SIGNAL_NEW_PREROLL] =
       g_signal_new ("new-preroll", G_TYPE_FROM_CLASS (klass), G_SIGNAL_RUN_LAST,
       G_STRUCT_OFFSET (GstAppSinkClass, new_preroll),
-      NULL, NULL, NULL, GST_TYPE_FLOW_RETURN, 0, G_TYPE_NONE);
+      NULL, NULL, gst_closure_marshal_ENUM__VOID, GST_TYPE_FLOW_RETURN, 0, G_TYPE_NONE);
   /**
    * GstAppSink::new-sample:
    * @appsink: the appsink element that emited the signal
@@ -294,7 +294,7 @@ gst_app_sink_class_init (GstAppSinkClass * klass)
   gst_app_sink_signals[SIGNAL_NEW_SAMPLE] =
       g_signal_new ("new-sample", G_TYPE_FROM_CLASS (klass), G_SIGNAL_RUN_LAST,
       G_STRUCT_OFFSET (GstAppSinkClass, new_sample),
-      NULL, NULL, NULL, GST_TYPE_FLOW_RETURN, 0, G_TYPE_NONE);
+      NULL, NULL, gst_closure_marshal_ENUM__VOID, GST_TYPE_FLOW_RETURN, 0, G_TYPE_NONE);
 
   /**
    * GstAppSink::pull-preroll:
@@ -322,7 +322,7 @@ gst_app_sink_class_init (GstAppSinkClass * klass)
   gst_app_sink_signals[SIGNAL_PULL_PREROLL] =
       g_signal_new ("pull-preroll", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_LAST | G_SIGNAL_ACTION, G_STRUCT_OFFSET (GstAppSinkClass,
-          pull_preroll), NULL, NULL, NULL, GST_TYPE_SAMPLE, 0, G_TYPE_NONE);
+          pull_preroll), NULL, NULL, gst_closure_marshal_POINTER__VOID, GST_TYPE_SAMPLE, 0, G_TYPE_NONE);
   /**
    * GstAppSink::pull-sample:
    * @appsink: the appsink element to emit this signal on
@@ -347,7 +347,7 @@ gst_app_sink_class_init (GstAppSinkClass * klass)
   gst_app_sink_signals[SIGNAL_PULL_SAMPLE] =
       g_signal_new ("pull-sample", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_LAST | G_SIGNAL_ACTION, G_STRUCT_OFFSET (GstAppSinkClass,
-          pull_sample), NULL, NULL, NULL, GST_TYPE_SAMPLE, 0, G_TYPE_NONE);
+          pull_sample), NULL, NULL, gst_closure_marshal_POINTER__VOID, GST_TYPE_SAMPLE, 0, G_TYPE_NONE);
   /**
    * GstAppSink::try-pull-preroll:
    * @appsink: the appsink element to emit this signal on
diff --git a/gst-libs/gst/app/gstappsrc.c b/gst-libs/gst/app/gstappsrc.c
--- a/gst-libs/gst/app/gstappsrc.c
+++ b/gst-libs/gst/app/gstappsrc.c
@@ -435,7 +435,7 @@ gst_app_src_class_init (GstAppSrcClass * klass)
   gst_app_src_signals[SIGNAL_NEED_DATA] =
       g_signal_new ("need-data", G_TYPE_FROM_CLASS (klass), G_SIGNAL_RUN_LAST,
       G_STRUCT_OFFSET (GstAppSrcClass, need_data),
-      NULL, NULL, NULL, G_TYPE_NONE, 1, G_TYPE_UINT);
+      NULL, NULL, g_cclosure_marshal_VOID__UINT, G_TYPE_NONE, 1, G_TYPE_UINT);
 
   /**
    * GstAppSrc::enough-data:
@@ -481,7 +481,7 @@ gst_app_src_class_init (GstAppSrcClass * klass)
   gst_app_src_signals[SIGNAL_PUSH_BUFFER] =
       g_signal_new ("push-buffer", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_LAST | G_SIGNAL_ACTION, G_STRUCT_OFFSET (GstAppSrcClass,
-          push_buffer), NULL, NULL, NULL,
+          push_buffer), NULL, NULL, gst_closure_marshal_ENUM__POINTER,
       GST_TYPE_FLOW_RETURN, 1, GST_TYPE_BUFFER);
 
   /**
@@ -507,7 +507,7 @@ gst_app_src_class_init (GstAppSrcClass * klass)
   gst_app_src_signals[SIGNAL_PUSH_SAMPLE] =
       g_signal_new ("push-sample", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_LAST | G_SIGNAL_ACTION, G_STRUCT_OFFSET (GstAppSrcClass,
-          push_sample), NULL, NULL, NULL,
+          push_sample), NULL, NULL, gst_closure_marshal_ENUM__POINTER,
       GST_TYPE_FLOW_RETURN, 1, GST_TYPE_SAMPLE);
 
 
@@ -520,7 +520,7 @@ gst_app_src_class_init (GstAppSrcClass * klass)
   gst_app_src_signals[SIGNAL_END_OF_STREAM] =
       g_signal_new ("end-of-stream", G_TYPE_FROM_CLASS (klass),
       G_SIGNAL_RUN_LAST | G_SIGNAL_ACTION, G_STRUCT_OFFSET (GstAppSrcClass,
-          end_of_stream), NULL, NULL, NULL,
+          end_of_stream), NULL, NULL, gst_closure_marshal_ENUM__VOID,
       GST_TYPE_FLOW_RETURN, 0, G_TYPE_NONE);
 
   gst_element_class_set_static_metadata (element_class, "AppSrc",
 
